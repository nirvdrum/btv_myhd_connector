//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
// 
#pragma warning disable 1591

namespace BTV_MyHD_Connector.BTVServer {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BTVLicenseManagerSoap", Namespace="http://www.snapstream.com/WebService")]
    public partial class BTVLicenseManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LogonOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogonRemoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoffOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionNumberOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BTVLicenseManager() {
            this.Url = global::BTV_MyHD_Connector.Properties.Settings.Default.BTV_MyHD_Connector_WebLicenseManager_BTVLicenseManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LogonCompletedEventHandler LogonCompleted;
        
        /// <remarks/>
        public event LogonRemoteCompletedEventHandler LogonRemoteCompleted;
        
        /// <remarks/>
        public event LogoffCompletedEventHandler LogoffCompleted;
        
        /// <remarks/>
        public event GetVersionNumberCompletedEventHandler GetVersionNumberCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/Logon", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Logon(string networkLicense, string password) {
            this.Invoke("Logon", new object[] {
                        networkLicense,
                        password});
        }
        
        /// <remarks/>
        public void LogonAsync(string networkLicense, string password) {
            this.LogonAsync(networkLicense, password, null);
        }
        
        /// <remarks/>
        public void LogonAsync(string networkLicense, string password, object userState) {
            if ((this.LogonOperationCompleted == null)) {
                this.LogonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonOperationCompleted);
            }
            this.InvokeAsync("Logon", new object[] {
                        networkLicense,
                        password}, this.LogonOperationCompleted, userState);
        }
        
        private void OnLogonOperationCompleted(object arg) {
            if ((this.LogonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/LogonRemote", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogonRemote(string networkLicense, string password) {
            this.Invoke("LogonRemote", new object[] {
                        networkLicense,
                        password});
        }
        
        /// <remarks/>
        public void LogonRemoteAsync(string networkLicense, string password) {
            this.LogonRemoteAsync(networkLicense, password, null);
        }
        
        /// <remarks/>
        public void LogonRemoteAsync(string networkLicense, string password, object userState) {
            if ((this.LogonRemoteOperationCompleted == null)) {
                this.LogonRemoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonRemoteOperationCompleted);
            }
            this.InvokeAsync("LogonRemote", new object[] {
                        networkLicense,
                        password}, this.LogonRemoteOperationCompleted, userState);
        }
        
        private void OnLogonRemoteOperationCompleted(object arg) {
            if ((this.LogonRemoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonRemoteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/Logoff", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Logoff() {
            this.Invoke("Logoff", new object[0]);
        }
        
        /// <remarks/>
        public void LogoffAsync() {
            this.LogoffAsync(null);
        }
        
        /// <remarks/>
        public void LogoffAsync(object userState) {
            if ((this.LogoffOperationCompleted == null)) {
                this.LogoffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoffOperationCompleted);
            }
            this.InvokeAsync("Logoff", new object[0], this.LogoffOperationCompleted, userState);
        }
        
        private void OnLogoffOperationCompleted(object arg) {
            if ((this.LogoffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoffCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetVersionNumber", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionNumber() {
            object[] results = this.Invoke("GetVersionNumber", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionNumberAsync() {
            this.GetVersionNumberAsync(null);
        }
        
        /// <remarks/>
        public void GetVersionNumberAsync(object userState) {
            if ((this.GetVersionNumberOperationCompleted == null)) {
                this.GetVersionNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionNumberOperationCompleted);
            }
            this.InvokeAsync("GetVersionNumber", new object[0], this.GetVersionNumberOperationCompleted, userState);
        }
        
        private void OnGetVersionNumberOperationCompleted(object arg) {
            if ((this.GetVersionNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionNumberCompleted(this, new GetVersionNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void LogonCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void LogonRemoteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void LogoffCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetVersionNumberCompletedEventHandler(object sender, GetVersionNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591