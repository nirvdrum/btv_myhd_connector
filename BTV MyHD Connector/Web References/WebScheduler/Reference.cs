//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
// 
#pragma warning disable 1591

namespace BTV_MyHD_Connector.BTVServer {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BTVSchedulerSoap", Namespace="http://www.snapstream.com/WebService")]
    public partial class BTVScheduler : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetJobsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpcomingRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditRecordingJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPossibleRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEpisodeStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlockedRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExistingConflictsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPotentialConflictsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetForcedRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRejectedRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecentRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReprioritizeJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRecordingJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRecordingJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetGlobalPaddingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPotentialRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextRecordingOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddBlockedRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddForcedRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveBlockedRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveForcedRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRecentRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRecentRecordingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPotentialScheduleAtPriorityOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BTVScheduler() {
            this.Url = global::BTV_MyHD_Connector.Properties.Settings.Default.BTV_MyHD_Connector_WebScheduler_BTVScheduler;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetJobsCompletedEventHandler GetJobsCompleted;
        
        /// <remarks/>
        public event GetUpcomingRecordingsCompletedEventHandler GetUpcomingRecordingsCompleted;
        
        /// <remarks/>
        public event EditRecordingJobCompletedEventHandler EditRecordingJobCompleted;
        
        /// <remarks/>
        public event GetPossibleRecordingsCompletedEventHandler GetPossibleRecordingsCompleted;
        
        /// <remarks/>
        public event GetEpisodeStatusCompletedEventHandler GetEpisodeStatusCompleted;
        
        /// <remarks/>
        public event GetBlockedRecordingsCompletedEventHandler GetBlockedRecordingsCompleted;
        
        /// <remarks/>
        public event GetExistingConflictsCompletedEventHandler GetExistingConflictsCompleted;
        
        /// <remarks/>
        public event GetPotentialConflictsCompletedEventHandler GetPotentialConflictsCompleted;
        
        /// <remarks/>
        public event GetForcedRecordingsCompletedEventHandler GetForcedRecordingsCompleted;
        
        /// <remarks/>
        public event GetRejectedRecordingsCompletedEventHandler GetRejectedRecordingsCompleted;
        
        /// <remarks/>
        public event GetRecentRecordingsCompletedEventHandler GetRecentRecordingsCompleted;
        
        /// <remarks/>
        public event ReprioritizeJobCompletedEventHandler ReprioritizeJobCompleted;
        
        /// <remarks/>
        public event RemoveRecordingJobCompletedEventHandler RemoveRecordingJobCompleted;
        
        /// <remarks/>
        public event AddRecordingJobCompletedEventHandler AddRecordingJobCompleted;
        
        /// <remarks/>
        public event SetGlobalPaddingCompletedEventHandler SetGlobalPaddingCompleted;
        
        /// <remarks/>
        public event GetRecordingsCompletedEventHandler GetRecordingsCompleted;
        
        /// <remarks/>
        public event GetPotentialRecordingsCompletedEventHandler GetPotentialRecordingsCompleted;
        
        /// <remarks/>
        public event GetNextRecordingCompletedEventHandler GetNextRecordingCompleted;
        
        /// <remarks/>
        public event AddBlockedRecordingsCompletedEventHandler AddBlockedRecordingsCompleted;
        
        /// <remarks/>
        public event AddForcedRecordingsCompletedEventHandler AddForcedRecordingsCompleted;
        
        /// <remarks/>
        public event RemoveBlockedRecordingsCompletedEventHandler RemoveBlockedRecordingsCompleted;
        
        /// <remarks/>
        public event RemoveForcedRecordingsCompletedEventHandler RemoveForcedRecordingsCompleted;
        
        /// <remarks/>
        public event AddRecentRecordingsCompletedEventHandler AddRecentRecordingsCompleted;
        
        /// <remarks/>
        public event RemoveRecentRecordingsCompletedEventHandler RemoveRecentRecordingsCompleted;
        
        /// <remarks/>
        public event GetPotentialScheduleAtPriorityCompletedEventHandler GetPotentialScheduleAtPriorityCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetJobs", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetJobs() {
            object[] results = this.Invoke("GetJobs", new object[0]);
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetJobsAsync() {
            this.GetJobsAsync(null);
        }
        
        /// <remarks/>
        public void GetJobsAsync(object userState) {
            if ((this.GetJobsOperationCompleted == null)) {
                this.GetJobsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobsOperationCompleted);
            }
            this.InvokeAsync("GetJobs", new object[0], this.GetJobsOperationCompleted, userState);
        }
        
        private void OnGetJobsOperationCompleted(object arg) {
            if ((this.GetJobsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobsCompleted(this, new GetJobsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetUpcomingRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetUpcomingRecordings() {
            object[] results = this.Invoke("GetUpcomingRecordings", new object[0]);
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUpcomingRecordingsAsync() {
            this.GetUpcomingRecordingsAsync(null);
        }
        
        /// <remarks/>
        public void GetUpcomingRecordingsAsync(object userState) {
            if ((this.GetUpcomingRecordingsOperationCompleted == null)) {
                this.GetUpcomingRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpcomingRecordingsOperationCompleted);
            }
            this.InvokeAsync("GetUpcomingRecordings", new object[0], this.GetUpcomingRecordingsOperationCompleted, userState);
        }
        
        private void OnGetUpcomingRecordingsOperationCompleted(object arg) {
            if ((this.GetUpcomingRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpcomingRecordingsCompleted(this, new GetUpcomingRecordingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/EditRecordingJob", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditRecordingJob(System.Guid guid, PVSPropertyBag bag) {
            this.Invoke("EditRecordingJob", new object[] {
                        guid,
                        bag});
        }
        
        /// <remarks/>
        public void EditRecordingJobAsync(System.Guid guid, PVSPropertyBag bag) {
            this.EditRecordingJobAsync(guid, bag, null);
        }
        
        /// <remarks/>
        public void EditRecordingJobAsync(System.Guid guid, PVSPropertyBag bag, object userState) {
            if ((this.EditRecordingJobOperationCompleted == null)) {
                this.EditRecordingJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditRecordingJobOperationCompleted);
            }
            this.InvokeAsync("EditRecordingJob", new object[] {
                        guid,
                        bag}, this.EditRecordingJobOperationCompleted, userState);
        }
        
        private void OnEditRecordingJobOperationCompleted(object arg) {
            if ((this.EditRecordingJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditRecordingJobCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetPossibleRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetPossibleRecordings() {
            object[] results = this.Invoke("GetPossibleRecordings", new object[0]);
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPossibleRecordingsAsync() {
            this.GetPossibleRecordingsAsync(null);
        }
        
        /// <remarks/>
        public void GetPossibleRecordingsAsync(object userState) {
            if ((this.GetPossibleRecordingsOperationCompleted == null)) {
                this.GetPossibleRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPossibleRecordingsOperationCompleted);
            }
            this.InvokeAsync("GetPossibleRecordings", new object[0], this.GetPossibleRecordingsOperationCompleted, userState);
        }
        
        private void OnGetPossibleRecordingsOperationCompleted(object arg) {
            if ((this.GetPossibleRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPossibleRecordingsCompleted(this, new GetPossibleRecordingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetEpisodeStatus", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag GetEpisodeStatus(PVSPropertyBag bag) {
            object[] results = this.Invoke("GetEpisodeStatus", new object[] {
                        bag});
            return ((PVSPropertyBag)(results[0]));
        }
        
        /// <remarks/>
        public void GetEpisodeStatusAsync(PVSPropertyBag bag) {
            this.GetEpisodeStatusAsync(bag, null);
        }
        
        /// <remarks/>
        public void GetEpisodeStatusAsync(PVSPropertyBag bag, object userState) {
            if ((this.GetEpisodeStatusOperationCompleted == null)) {
                this.GetEpisodeStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEpisodeStatusOperationCompleted);
            }
            this.InvokeAsync("GetEpisodeStatus", new object[] {
                        bag}, this.GetEpisodeStatusOperationCompleted, userState);
        }
        
        private void OnGetEpisodeStatusOperationCompleted(object arg) {
            if ((this.GetEpisodeStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEpisodeStatusCompleted(this, new GetEpisodeStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetBlockedRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetBlockedRecordings() {
            object[] results = this.Invoke("GetBlockedRecordings", new object[0]);
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBlockedRecordingsAsync() {
            this.GetBlockedRecordingsAsync(null);
        }
        
        /// <remarks/>
        public void GetBlockedRecordingsAsync(object userState) {
            if ((this.GetBlockedRecordingsOperationCompleted == null)) {
                this.GetBlockedRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlockedRecordingsOperationCompleted);
            }
            this.InvokeAsync("GetBlockedRecordings", new object[0], this.GetBlockedRecordingsOperationCompleted, userState);
        }
        
        private void OnGetBlockedRecordingsOperationCompleted(object arg) {
            if ((this.GetBlockedRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlockedRecordingsCompleted(this, new GetBlockedRecordingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetExistingConflicts", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetExistingConflicts(System.Guid guid) {
            object[] results = this.Invoke("GetExistingConflicts", new object[] {
                        guid});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetExistingConflictsAsync(System.Guid guid) {
            this.GetExistingConflictsAsync(guid, null);
        }
        
        /// <remarks/>
        public void GetExistingConflictsAsync(System.Guid guid, object userState) {
            if ((this.GetExistingConflictsOperationCompleted == null)) {
                this.GetExistingConflictsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExistingConflictsOperationCompleted);
            }
            this.InvokeAsync("GetExistingConflicts", new object[] {
                        guid}, this.GetExistingConflictsOperationCompleted, userState);
        }
        
        private void OnGetExistingConflictsOperationCompleted(object arg) {
            if ((this.GetExistingConflictsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExistingConflictsCompleted(this, new GetExistingConflictsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetPotentialConflicts", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetPotentialConflicts(PVSPropertyBag bag) {
            object[] results = this.Invoke("GetPotentialConflicts", new object[] {
                        bag});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPotentialConflictsAsync(PVSPropertyBag bag) {
            this.GetPotentialConflictsAsync(bag, null);
        }
        
        /// <remarks/>
        public void GetPotentialConflictsAsync(PVSPropertyBag bag, object userState) {
            if ((this.GetPotentialConflictsOperationCompleted == null)) {
                this.GetPotentialConflictsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPotentialConflictsOperationCompleted);
            }
            this.InvokeAsync("GetPotentialConflicts", new object[] {
                        bag}, this.GetPotentialConflictsOperationCompleted, userState);
        }
        
        private void OnGetPotentialConflictsOperationCompleted(object arg) {
            if ((this.GetPotentialConflictsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPotentialConflictsCompleted(this, new GetPotentialConflictsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetForcedRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetForcedRecordings() {
            object[] results = this.Invoke("GetForcedRecordings", new object[0]);
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetForcedRecordingsAsync() {
            this.GetForcedRecordingsAsync(null);
        }
        
        /// <remarks/>
        public void GetForcedRecordingsAsync(object userState) {
            if ((this.GetForcedRecordingsOperationCompleted == null)) {
                this.GetForcedRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetForcedRecordingsOperationCompleted);
            }
            this.InvokeAsync("GetForcedRecordings", new object[0], this.GetForcedRecordingsOperationCompleted, userState);
        }
        
        private void OnGetForcedRecordingsOperationCompleted(object arg) {
            if ((this.GetForcedRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetForcedRecordingsCompleted(this, new GetForcedRecordingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetRejectedRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetRejectedRecordings() {
            object[] results = this.Invoke("GetRejectedRecordings", new object[0]);
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRejectedRecordingsAsync() {
            this.GetRejectedRecordingsAsync(null);
        }
        
        /// <remarks/>
        public void GetRejectedRecordingsAsync(object userState) {
            if ((this.GetRejectedRecordingsOperationCompleted == null)) {
                this.GetRejectedRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRejectedRecordingsOperationCompleted);
            }
            this.InvokeAsync("GetRejectedRecordings", new object[0], this.GetRejectedRecordingsOperationCompleted, userState);
        }
        
        private void OnGetRejectedRecordingsOperationCompleted(object arg) {
            if ((this.GetRejectedRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRejectedRecordingsCompleted(this, new GetRejectedRecordingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetRecentRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetRecentRecordings() {
            object[] results = this.Invoke("GetRecentRecordings", new object[0]);
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRecentRecordingsAsync() {
            this.GetRecentRecordingsAsync(null);
        }
        
        /// <remarks/>
        public void GetRecentRecordingsAsync(object userState) {
            if ((this.GetRecentRecordingsOperationCompleted == null)) {
                this.GetRecentRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecentRecordingsOperationCompleted);
            }
            this.InvokeAsync("GetRecentRecordings", new object[0], this.GetRecentRecordingsOperationCompleted, userState);
        }
        
        private void OnGetRecentRecordingsOperationCompleted(object arg) {
            if ((this.GetRecentRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecentRecordingsCompleted(this, new GetRecentRecordingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/ReprioritizeJob", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReprioritizeJob(System.Guid guid, uint priority) {
            this.Invoke("ReprioritizeJob", new object[] {
                        guid,
                        priority});
        }
        
        /// <remarks/>
        public void ReprioritizeJobAsync(System.Guid guid, uint priority) {
            this.ReprioritizeJobAsync(guid, priority, null);
        }
        
        /// <remarks/>
        public void ReprioritizeJobAsync(System.Guid guid, uint priority, object userState) {
            if ((this.ReprioritizeJobOperationCompleted == null)) {
                this.ReprioritizeJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReprioritizeJobOperationCompleted);
            }
            this.InvokeAsync("ReprioritizeJob", new object[] {
                        guid,
                        priority}, this.ReprioritizeJobOperationCompleted, userState);
        }
        
        private void OnReprioritizeJobOperationCompleted(object arg) {
            if ((this.ReprioritizeJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReprioritizeJobCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/RemoveRecordingJob", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveRecordingJob(System.Guid guid) {
            this.Invoke("RemoveRecordingJob", new object[] {
                        guid});
        }
        
        /// <remarks/>
        public void RemoveRecordingJobAsync(System.Guid guid) {
            this.RemoveRecordingJobAsync(guid, null);
        }
        
        /// <remarks/>
        public void RemoveRecordingJobAsync(System.Guid guid, object userState) {
            if ((this.RemoveRecordingJobOperationCompleted == null)) {
                this.RemoveRecordingJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRecordingJobOperationCompleted);
            }
            this.InvokeAsync("RemoveRecordingJob", new object[] {
                        guid}, this.RemoveRecordingJobOperationCompleted, userState);
        }
        
        private void OnRemoveRecordingJobOperationCompleted(object arg) {
            if ((this.RemoveRecordingJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRecordingJobCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/AddRecordingJob", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddRecordingJob(PVSPropertyBag bag, int highestPriority) {
            this.Invoke("AddRecordingJob", new object[] {
                        bag,
                        highestPriority});
        }
        
        /// <remarks/>
        public void AddRecordingJobAsync(PVSPropertyBag bag, int highestPriority) {
            this.AddRecordingJobAsync(bag, highestPriority, null);
        }
        
        /// <remarks/>
        public void AddRecordingJobAsync(PVSPropertyBag bag, int highestPriority, object userState) {
            if ((this.AddRecordingJobOperationCompleted == null)) {
                this.AddRecordingJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRecordingJobOperationCompleted);
            }
            this.InvokeAsync("AddRecordingJob", new object[] {
                        bag,
                        highestPriority}, this.AddRecordingJobOperationCompleted, userState);
        }
        
        private void OnAddRecordingJobOperationCompleted(object arg) {
            if ((this.AddRecordingJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRecordingJobCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/SetGlobalPadding", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetGlobalPadding(ulong padding) {
            this.Invoke("SetGlobalPadding", new object[] {
                        padding});
        }
        
        /// <remarks/>
        public void SetGlobalPaddingAsync(ulong padding) {
            this.SetGlobalPaddingAsync(padding, null);
        }
        
        /// <remarks/>
        public void SetGlobalPaddingAsync(ulong padding, object userState) {
            if ((this.SetGlobalPaddingOperationCompleted == null)) {
                this.SetGlobalPaddingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetGlobalPaddingOperationCompleted);
            }
            this.InvokeAsync("SetGlobalPadding", new object[] {
                        padding}, this.SetGlobalPaddingOperationCompleted, userState);
        }
        
        private void OnSetGlobalPaddingOperationCompleted(object arg) {
            if ((this.SetGlobalPaddingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetGlobalPaddingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetRecordings(System.Guid guid) {
            object[] results = this.Invoke("GetRecordings", new object[] {
                        guid});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRecordingsAsync(System.Guid guid) {
            this.GetRecordingsAsync(guid, null);
        }
        
        /// <remarks/>
        public void GetRecordingsAsync(System.Guid guid, object userState) {
            if ((this.GetRecordingsOperationCompleted == null)) {
                this.GetRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecordingsOperationCompleted);
            }
            this.InvokeAsync("GetRecordings", new object[] {
                        guid}, this.GetRecordingsOperationCompleted, userState);
        }
        
        private void OnGetRecordingsOperationCompleted(object arg) {
            if ((this.GetRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecordingsCompleted(this, new GetRecordingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetPotentialRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetPotentialRecordings(PVSPropertyBag bag) {
            object[] results = this.Invoke("GetPotentialRecordings", new object[] {
                        bag});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPotentialRecordingsAsync(PVSPropertyBag bag) {
            this.GetPotentialRecordingsAsync(bag, null);
        }
        
        /// <remarks/>
        public void GetPotentialRecordingsAsync(PVSPropertyBag bag, object userState) {
            if ((this.GetPotentialRecordingsOperationCompleted == null)) {
                this.GetPotentialRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPotentialRecordingsOperationCompleted);
            }
            this.InvokeAsync("GetPotentialRecordings", new object[] {
                        bag}, this.GetPotentialRecordingsOperationCompleted, userState);
        }
        
        private void OnGetPotentialRecordingsOperationCompleted(object arg) {
            if ((this.GetPotentialRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPotentialRecordingsCompleted(this, new GetPotentialRecordingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetNextRecording", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag GetNextRecording() {
            object[] results = this.Invoke("GetNextRecording", new object[0]);
            return ((PVSPropertyBag)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextRecordingAsync() {
            this.GetNextRecordingAsync(null);
        }
        
        /// <remarks/>
        public void GetNextRecordingAsync(object userState) {
            if ((this.GetNextRecordingOperationCompleted == null)) {
                this.GetNextRecordingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextRecordingOperationCompleted);
            }
            this.InvokeAsync("GetNextRecording", new object[0], this.GetNextRecordingOperationCompleted, userState);
        }
        
        private void OnGetNextRecordingOperationCompleted(object arg) {
            if ((this.GetNextRecordingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextRecordingCompleted(this, new GetNextRecordingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/AddBlockedRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddBlockedRecordings(PVSPropertyBag[] bags) {
            this.Invoke("AddBlockedRecordings", new object[] {
                        bags});
        }
        
        /// <remarks/>
        public void AddBlockedRecordingsAsync(PVSPropertyBag[] bags) {
            this.AddBlockedRecordingsAsync(bags, null);
        }
        
        /// <remarks/>
        public void AddBlockedRecordingsAsync(PVSPropertyBag[] bags, object userState) {
            if ((this.AddBlockedRecordingsOperationCompleted == null)) {
                this.AddBlockedRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddBlockedRecordingsOperationCompleted);
            }
            this.InvokeAsync("AddBlockedRecordings", new object[] {
                        bags}, this.AddBlockedRecordingsOperationCompleted, userState);
        }
        
        private void OnAddBlockedRecordingsOperationCompleted(object arg) {
            if ((this.AddBlockedRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddBlockedRecordingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/AddForcedRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddForcedRecordings(PVSPropertyBag[] bags) {
            this.Invoke("AddForcedRecordings", new object[] {
                        bags});
        }
        
        /// <remarks/>
        public void AddForcedRecordingsAsync(PVSPropertyBag[] bags) {
            this.AddForcedRecordingsAsync(bags, null);
        }
        
        /// <remarks/>
        public void AddForcedRecordingsAsync(PVSPropertyBag[] bags, object userState) {
            if ((this.AddForcedRecordingsOperationCompleted == null)) {
                this.AddForcedRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddForcedRecordingsOperationCompleted);
            }
            this.InvokeAsync("AddForcedRecordings", new object[] {
                        bags}, this.AddForcedRecordingsOperationCompleted, userState);
        }
        
        private void OnAddForcedRecordingsOperationCompleted(object arg) {
            if ((this.AddForcedRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddForcedRecordingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/RemoveBlockedRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveBlockedRecordings(PVSPropertyBag[] bags) {
            this.Invoke("RemoveBlockedRecordings", new object[] {
                        bags});
        }
        
        /// <remarks/>
        public void RemoveBlockedRecordingsAsync(PVSPropertyBag[] bags) {
            this.RemoveBlockedRecordingsAsync(bags, null);
        }
        
        /// <remarks/>
        public void RemoveBlockedRecordingsAsync(PVSPropertyBag[] bags, object userState) {
            if ((this.RemoveBlockedRecordingsOperationCompleted == null)) {
                this.RemoveBlockedRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveBlockedRecordingsOperationCompleted);
            }
            this.InvokeAsync("RemoveBlockedRecordings", new object[] {
                        bags}, this.RemoveBlockedRecordingsOperationCompleted, userState);
        }
        
        private void OnRemoveBlockedRecordingsOperationCompleted(object arg) {
            if ((this.RemoveBlockedRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveBlockedRecordingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/RemoveForcedRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveForcedRecordings(PVSPropertyBag[] bags) {
            this.Invoke("RemoveForcedRecordings", new object[] {
                        bags});
        }
        
        /// <remarks/>
        public void RemoveForcedRecordingsAsync(PVSPropertyBag[] bags) {
            this.RemoveForcedRecordingsAsync(bags, null);
        }
        
        /// <remarks/>
        public void RemoveForcedRecordingsAsync(PVSPropertyBag[] bags, object userState) {
            if ((this.RemoveForcedRecordingsOperationCompleted == null)) {
                this.RemoveForcedRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveForcedRecordingsOperationCompleted);
            }
            this.InvokeAsync("RemoveForcedRecordings", new object[] {
                        bags}, this.RemoveForcedRecordingsOperationCompleted, userState);
        }
        
        private void OnRemoveForcedRecordingsOperationCompleted(object arg) {
            if ((this.RemoveForcedRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveForcedRecordingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/AddRecentRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddRecentRecordings(PVSPropertyBag[] bags) {
            this.Invoke("AddRecentRecordings", new object[] {
                        bags});
        }
        
        /// <remarks/>
        public void AddRecentRecordingsAsync(PVSPropertyBag[] bags) {
            this.AddRecentRecordingsAsync(bags, null);
        }
        
        /// <remarks/>
        public void AddRecentRecordingsAsync(PVSPropertyBag[] bags, object userState) {
            if ((this.AddRecentRecordingsOperationCompleted == null)) {
                this.AddRecentRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRecentRecordingsOperationCompleted);
            }
            this.InvokeAsync("AddRecentRecordings", new object[] {
                        bags}, this.AddRecentRecordingsOperationCompleted, userState);
        }
        
        private void OnAddRecentRecordingsOperationCompleted(object arg) {
            if ((this.AddRecentRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRecentRecordingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/RemoveRecentRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveRecentRecordings(PVSPropertyBag[] bags) {
            this.Invoke("RemoveRecentRecordings", new object[] {
                        bags});
        }
        
        /// <remarks/>
        public void RemoveRecentRecordingsAsync(PVSPropertyBag[] bags) {
            this.RemoveRecentRecordingsAsync(bags, null);
        }
        
        /// <remarks/>
        public void RemoveRecentRecordingsAsync(PVSPropertyBag[] bags, object userState) {
            if ((this.RemoveRecentRecordingsOperationCompleted == null)) {
                this.RemoveRecentRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRecentRecordingsOperationCompleted);
            }
            this.InvokeAsync("RemoveRecentRecordings", new object[] {
                        bags}, this.RemoveRecentRecordingsOperationCompleted, userState);
        }
        
        private void OnRemoveRecentRecordingsOperationCompleted(object arg) {
            if ((this.RemoveRecentRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRecentRecordingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetPotentialScheduleAtPriority", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBagArray[] GetPotentialScheduleAtPriority(PVSPropertyBag bag, uint priority) {
            object[] results = this.Invoke("GetPotentialScheduleAtPriority", new object[] {
                        bag,
                        priority});
            return ((PVSPropertyBagArray[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPotentialScheduleAtPriorityAsync(PVSPropertyBag bag, uint priority) {
            this.GetPotentialScheduleAtPriorityAsync(bag, priority, null);
        }
        
        /// <remarks/>
        public void GetPotentialScheduleAtPriorityAsync(PVSPropertyBag bag, uint priority, object userState) {
            if ((this.GetPotentialScheduleAtPriorityOperationCompleted == null)) {
                this.GetPotentialScheduleAtPriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPotentialScheduleAtPriorityOperationCompleted);
            }
            this.InvokeAsync("GetPotentialScheduleAtPriority", new object[] {
                        bag,
                        priority}, this.GetPotentialScheduleAtPriorityOperationCompleted, userState);
        }
        
        private void OnGetPotentialScheduleAtPriorityOperationCompleted(object arg) {
            if ((this.GetPotentialScheduleAtPriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPotentialScheduleAtPriorityCompleted(this, new GetPotentialScheduleAtPriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.snapstream.com/types")]
    public partial class PVSPropertyBag {
        
        private PVSProperty[] propertiesField;
        
        /// <remarks/>
        public PVSProperty[] Properties {
            get {
                return this.propertiesField;
            }
            set {
                this.propertiesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.snapstream.com/types")]
    public partial class PVSProperty {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.snapstream.com/types")]
    public partial class PVSPropertyBagArray {
        
        private PVSPropertyBag[] bagsField;
        
        /// <remarks/>
        public PVSPropertyBag[] Bags {
            get {
                return this.bagsField;
            }
            set {
                this.bagsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetJobsCompletedEventHandler(object sender, GetJobsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetUpcomingRecordingsCompletedEventHandler(object sender, GetUpcomingRecordingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUpcomingRecordingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUpcomingRecordingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void EditRecordingJobCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetPossibleRecordingsCompletedEventHandler(object sender, GetPossibleRecordingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPossibleRecordingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPossibleRecordingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetEpisodeStatusCompletedEventHandler(object sender, GetEpisodeStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEpisodeStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEpisodeStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetBlockedRecordingsCompletedEventHandler(object sender, GetBlockedRecordingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlockedRecordingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlockedRecordingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetExistingConflictsCompletedEventHandler(object sender, GetExistingConflictsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExistingConflictsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExistingConflictsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetPotentialConflictsCompletedEventHandler(object sender, GetPotentialConflictsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPotentialConflictsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPotentialConflictsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetForcedRecordingsCompletedEventHandler(object sender, GetForcedRecordingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetForcedRecordingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetForcedRecordingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetRejectedRecordingsCompletedEventHandler(object sender, GetRejectedRecordingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRejectedRecordingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRejectedRecordingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetRecentRecordingsCompletedEventHandler(object sender, GetRecentRecordingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecentRecordingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecentRecordingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void ReprioritizeJobCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void RemoveRecordingJobCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddRecordingJobCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SetGlobalPaddingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetRecordingsCompletedEventHandler(object sender, GetRecordingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecordingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecordingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetPotentialRecordingsCompletedEventHandler(object sender, GetPotentialRecordingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPotentialRecordingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPotentialRecordingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetNextRecordingCompletedEventHandler(object sender, GetNextRecordingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextRecordingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextRecordingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddBlockedRecordingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddForcedRecordingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void RemoveBlockedRecordingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void RemoveForcedRecordingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddRecentRecordingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void RemoveRecentRecordingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetPotentialScheduleAtPriorityCompletedEventHandler(object sender, GetPotentialScheduleAtPriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPotentialScheduleAtPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPotentialScheduleAtPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBagArray[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBagArray[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591